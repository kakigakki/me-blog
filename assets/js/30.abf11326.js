(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{485:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"深入理解系列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入理解系列"}},[t._v("#")]),t._v(" 深入理解系列")]),t._v(" "),a("h3",{attrs:{id:"执行上下文与作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文与作用域"}},[t._v("#")]),t._v(" 执行上下文与作用域")]),t._v(" "),a("ol",[a("li",[t._v("js 中的作用域属于静态作用域,当被声明的时候作用域中变量就被决定了")]),t._v(" "),a("li",[t._v("函数上下文的变量对象初始化只包括 Arguments 对象,不包括形参,函数声明,变量声明")]),t._v(" "),a("li",[t._v("在进入执行上下文时会给变量对象添加形参、函数声明、变量声明等初始的属性值")]),t._v(" "),a("li",[t._v("在代码执行阶段，会再次修改变量对象的属性值")])]),t._v(" "),a("h2",{attrs:{id:"实战系列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实战系列"}},[t._v("#")]),t._v(" 实战系列")]),t._v(" "),a("h3",{attrs:{id:"利用-cheerio-进行网络爬虫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用-cheerio-进行网络爬虫"}},[t._v("#")]),t._v(" 利用 cheerio 进行网络爬虫")]),t._v(" "),a("ol",[a("li",[t._v("cheerio 可以在服务器端操作网络请求回来的 dom 元素,从而达到操作 dom 元素获取数据的效果")])]),t._v(" "),a("h3",{attrs:{id:"this-的指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-的指向"}},[t._v("#")]),t._v(" this 的指向")]),t._v(" "),a("ol",[a("li",[t._v("函数直接调用的话,this 就是全局对象")]),t._v(" "),a("li",[t._v("用 new 的话指向新 new 出来对象")]),t._v(" "),a("li",[t._v("call,apply,bind 的情况,指向第一个参数的 obj")]),t._v(" "),a("li",[t._v("箭头函数的 this 相当于箭头函数定义时所在作用域的普通函数的 this 注意: "),a("strong",[t._v("箭头函数不要直接在对象中声明,因为对象没有作用域")])]),t._v(" "),a("li",[t._v("在事件响应函数中,响应函数绑定给谁,this 就指向谁")])]),t._v(" "),a("h3",{attrs:{id:"typeof-和-instanceof-的不同之处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-和-instanceof-的不同之处"}},[t._v("#")]),t._v(" typeof 和 instanceof 的不同之处")]),t._v(" "),a("ol",[a("li",[t._v("typeof 数组和对象 都是 object")]),t._v(" "),a("li",[t._v("typeof 函数 是 function")]),t._v(" "),a("li",[t._v("instanceof 数组和对象,能够区别")]),t._v(" "),a("li",[t._v("数组的 this.contructor 是数组函数")])]),t._v(" "),a("h3",{attrs:{id:"利用-object-prototype-valueof，动态改变函数内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用-object-prototype-valueof，动态改变函数内容"}},[t._v("#")]),t._v(" 利用 Object.prototype.valueOf，动态改变函数内容")]),t._v(" "),a("ol",[a("li",[t._v("当需要一个函数，要满足能够无限调用，即可以有无限个"),a("code",[t._v("()")]),t._v("，且最后返回的是一个原始值时，就可以使用"),a("code",[t._v("valueOf")]),t._v("来修改函数返回的内容为原始值")]),t._v(" "),a("li",[t._v("在 codeWars 上看到了一个有意思的题目，可以利用"),a("code",[t._v("valueOf")]),t._v("轻松实现")]),t._v(" "),a("li",[t._v("题目描述如下：")])]),t._v(" "),a("p",[t._v("::: ctnr")]),t._v(" "),a("p",[t._v("创建一个函数，该函数满足下面条件：")]),t._v(" "),a("ul",[a("li",[t._v("接受任意数量的参数，")]),t._v(" "),a("li",[t._v("返回给定的每个参数的总和，")]),t._v(" "),a("li",[t._v("任何不能解析为数字的参数都将计为 0。")]),t._v(" "),a("li",[t._v("可以无限调用，")]),t._v(" "),a("li",[t._v("下一个函数调用将执行相同的操作，且与前一次结果求和，最后返回的数字。")])]),t._v(" "),a("p",[t._v(":::")]),t._v(" "),a("p",[t._v("代码：\n::: click")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MagicFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将能转为数值的转为数值")]),t._v("\n    sum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" args\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//排除NaN")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prev")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" prev "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" cur\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f1\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" sum1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//利用valueOf重新声明f1函数，此时 f1.valueOf() == f1 为true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v(":::")]),t._v(" "),a("h2",{attrs:{id:"es6-系列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-系列"}},[t._v("#")]),t._v(" ES6 系列")]),t._v(" "),a("h3",{attrs:{id:"class-与构造函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class-与构造函数的区别"}},[t._v("#")]),t._v(" class 与构造函数的区别")]),t._v(" "),a("ul",[a("li",[t._v("大部分情况下，class 只是构造函数的语法糖")]),t._v(" "),a("li",[t._v("class 中直接定义的方法就是定义在"),a("code",[t._v("prototype")]),t._v("上的")]),t._v(" "),a("li",[t._v("class 中直接定义的属性，就是实例属性，相当于"),a("code",[t._v("this.xxx")])]),t._v(" "),a("li",[t._v("class 中定义的方法都是不可枚举的，构造方法的原型方法是可以枚举的")]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("constuctor")]),t._v("中定义属性"),a("code",[t._v("this.xxx = yyy")]),t._v("和在外面定义的"),a("code",[t._v("xxx=yyy")]),t._v("中是一样的")]),t._v(" "),a("li",[t._v("class 不能不带"),a("code",[t._v("new")]),t._v("直接调用，会报错")]),t._v(" "),a("li",[t._v("类在定义的时候不存在变量提升，这点与构造方法完全不同")]),t._v(" "),a("li",[t._v("类中有静态属性/方法"),a("code",[t._v("static xxx = yyy")]),t._v(" 表示该方法只能由类本身调用，实例中不存在")]),t._v(" "),a("li",[t._v("类中有私有属性/属性（提案中）"),a("code",[t._v("#xxx = yyy")]),t._v(" 表示该属性只能在类内部被调用(实例中虽然也有该属性，但是在类的外部也不能调用，可以通过传参将实例传进类内部调用该私有属性)")]),t._v(" "),a("li",[t._v("类中也可以定义静态私有属性"),a("code",[t._v("static #xxx =yyy")])]),t._v(" "),a("li",[t._v("new 命令的新属性"),a("code",[t._v("new.target")]),t._v("返回一个通过"),a("code",[t._v("new")]),t._v("或者"),a("code",[t._v("Reflect.constructor")]),t._v("创建的实例对象的类/构造函数")]),t._v(" "),a("li",[t._v("该属性可以判断一个构造函数/类是如何被调用的")]),t._v(" "),a("li",[t._v("该属性在子类继承父类时，new.target 返回的是子类，利用这个特点，可以实现父类只能被继承，不能被实例化（有点像抽象类？）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Shape"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'本类不能实例化'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Shape")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 正确")]),t._v("\n")])])]),a("h3",{attrs:{id:"async-知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-知识点"}},[t._v("#")]),t._v(" async 知识点")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("async")]),t._v("函数完全可以看作多个异步操作，包装成的一个"),a("code",[t._v("Promise")]),t._v("对象，而 await 命令就是内部 then 命令的语法糖。")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v("总是返回一个"),a("code",[t._v("Promise")]),t._v("对象,且 return 后的语句总是作为 then 的回调的参数")]),t._v(" "),a("li",[a("code",[t._v("await")]),t._v("后面如果是 Promise 对象(或 thenable 对象),返回该对象的 "),a("code",[t._v("resolve()参数")]),t._v(",如果是数值字符之类的,则就是返回其值")]),t._v(" "),a("li",[t._v("任何一个"),a("code",[t._v("await")]),t._v("语句后面的"),a("code",[t._v("Promise")]),t._v("对象变为"),a("code",[t._v("reject")]),t._v("状态，那么整个"),a("code",[t._v("async")]),t._v("函数都会中断执行。")])]),t._v(" "),a("h3",{attrs:{id:"es6-模块化与-commonjs-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块化与-commonjs-的区别"}},[t._v("#")]),t._v(" ES6 模块化与 CommonJS 的区别")]),t._v(" "),a("ul",[a("li",[t._v("ES6 的"),a("code",[t._v("export")]),t._v("语法主要为以下几种")])]),t._v(" "),a("div",{staticClass:"language-JS extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//直接导出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("x\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("x2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先声明再导出,一般用此方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" y2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("y1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取别名后导出")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" y2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("y1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"proxy-与-reflect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy-与-reflect"}},[t._v("#")]),t._v(" proxy 与 reflect")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("proxy")]),t._v("跟"),a("code",[t._v("reflect")]),t._v("都有 13 个静态方法")]),t._v(" "),a("li",[a("code",[t._v("set(target, name, value, receiver)")]),t._v("和"),a("code",[t._v("get(target, name, value, receiver)")]),t._v("中的"),a("code",[t._v("reciver")]),t._v("总是指向 proxy 实例")])])])}),[],!1,null,null,null);s.default=e.exports}}]);