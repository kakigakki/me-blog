(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{468:function(t,a,e){"use strict";e.r(a);var r=e(8),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[t._v("#")]),t._v(" 作用")]),t._v(" "),e("h4",{attrs:{id:"与传统虚拟器技术的不同"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#与传统虚拟器技术的不同"}},[t._v("#")]),t._v(" 与传统虚拟器技术的不同")]),t._v(" "),e("ol",[e("li",[t._v("传统虚拟器会虚拟出一整个完整的系统")]),t._v(" "),e("li",[t._v("docker 容器内的应用直接运行在宿主机的内容。没有自己的内核，也没有虚拟硬件")])]),t._v(" "),e("h4",{attrs:{id:"devops"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#devops"}},[t._v("#")]),t._v(" DevOps")]),t._v(" "),e("ol",[e("li",[t._v("更快速的交付与部署\n使用 Docker 可以打包镜像发布测试，一键运行")]),t._v(" "),e("li",[t._v("更便捷的升级和扩缩容\n将项目打包成一个镜像。")]),t._v(" "),e("li",[t._v("更简单的系统运维\n容器化后，开发，测试环境都是高度一致的")]),t._v(" "),e("li",[t._v("更高效的计算资源利用。\n可以同时在一个物理机器上运行很多的容器实例，服务器的性能可以被压榨到极致")])]),t._v(" "),e("h3",{attrs:{id:"组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组成"}},[t._v("#")]),t._v(" 组成")]),t._v(" "),e("h4",{attrs:{id:"镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像"}},[t._v("#")]),t._v(" 镜像")]),t._v(" "),e("p",[t._v("通过镜像可以创建多个容器,有点像类与对象的关系。最终服务运行或者项目运行就是在容器中。")]),t._v(" "),e("h4",{attrs:{id:"容器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[t._v("#")]),t._v(" 容器")]),t._v(" "),e("p",[t._v("独立运行一个或一组应用，通过镜像来创建的。可以理解为一个简易的 Linux 系统")]),t._v(" "),e("h4",{attrs:{id:"仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#仓库"}},[t._v("#")]),t._v(" 仓库")]),t._v(" "),e("p",[t._v("存在镜像的地方。\n仓库也分为私有和共有的。类似与 Github")]),t._v(" "),e("h3",{attrs:{id:"安装与卸载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装与卸载"}},[t._v("#")]),t._v(" 安装与卸载")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/engine/install/centos/",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装地址"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"国内服务器需要换国内镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#国内服务器需要换国内镜像"}},[t._v("#")]),t._v(" 国内服务器需要换国内镜像")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("yum"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("manager "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("add"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("repo http"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo")]),t._v("\n")])])]),e("h4",{attrs:{id:"执行镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行镜像"}},[t._v("#")]),t._v(" 执行镜像")]),t._v(" "),e("p",[e("code",[t._v("docker run 镜像名")]),t._v("\n执行已下工作\n"),e("img",{attrs:{src:"https://raw.githubusercontent.com/kakigakki/picBed/master/imgs/20210308000639.png",alt:"20210308000639"}})]),t._v(" "),e("h3",{attrs:{id:"底层原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#底层原理"}},[t._v("#")]),t._v(" 底层原理")]),t._v(" "),e("h4",{attrs:{id:"如何工作的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何工作的"}},[t._v("#")]),t._v(" 如何工作的")]),t._v(" "),e("p",[t._v("docker 是一个 client-server 结构的系统，守护进程运行在主机上。通过 socket 从客户端访问。dockerServer 接受到 dockerClient 的指令时，就会执行这个命令。")]),t._v(" "),e("h3",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/engine/reference/run/",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档地址"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"帮助命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#帮助命令"}},[t._v("#")]),t._v(" 帮助命令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker version")])]),t._v(" "),e("li",[e("code",[t._v("docker info")])]),t._v(" "),e("li",[e("code",[t._v("docker [命令名] --help")])])]),t._v(" "),e("h4",{attrs:{id:"镜像命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像命令"}},[t._v("#")]),t._v(" 镜像命令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker search 镜像名")]),t._v(" 搜索镜像")]),t._v(" "),e("li",[e("code",[t._v("docker pull 镜像名[:标签名]")]),t._v(" 下载镜像")]),t._v(" "),e("li",[e("code",[t._v("docker rmi [-f] 镜像名(或id)")]),t._v(" 删除镜像\n"),e("ul",[e("li",[e("code",[t._v("docker rmi [-f] $(docker images -aq)")]),t._v(" 删除全部镜像")])])])]),t._v(" "),e("h4",{attrs:{id:"容器常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器常用命令"}},[t._v("#")]),t._v(" 容器常用命令")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("docker run [可选参数] image")]),t._v(" 创建并运行容器\n"),e("ul",[e("li",[e("code",[t._v('--name="Name"')]),t._v("指定容器名字，用来区别同一镜像下不同容器的时候使用")]),t._v(" "),e("li",[e("code",[t._v("--name 容器名字")]),t._v(" 给容器起名字")]),t._v(" "),e("li",[e("code",[t._v("-d")]),t._v(" 后台方式运行（需要容器后台运行，必须需要前台有个容器正在运行，否则此容器会自动销毁）")]),t._v(" "),e("li",[e("code",[t._v("-it")]),t._v(" 使用交互方式运行，进入容器查看内容")]),t._v(" "),e("li",[e("code",[t._v("-p")]),t._v(" 指定容器的端口\n"),e("ul",[e("li",[e("code",[t._v("-p ip:主机端口：容器端口")])]),t._v(" "),e("li",[e("code",[t._v("-p 主机端口：容器端口")]),t._v("(常用)")]),t._v(" "),e("li",[e("code",[t._v("-p 容器端口")]),t._v("、")])])]),t._v(" "),e("li",[e("code",[t._v("-p")]),t._v(" 随机指定端口")])])]),t._v(" "),e("li",[e("code",[t._v("docker ps")]),t._v(" 查看运行中的容器\n"),e("ul",[e("li",[e("code",[t._v("-a")]),t._v(" 运行中+历史")]),t._v(" "),e("li",[e("code",[t._v("-n=?")]),t._v(" 最近创建的容器")]),t._v(" "),e("li",[e("code",[t._v("-q")]),t._v("只显示容器 id")])])]),t._v(" "),e("li",[e("code",[t._v("exit")]),t._v(" 停止容器并退出容器\n"),e("ul",[e("li",[e("code",[t._v("Ctrl+P+Q")]),t._v(" 容器不停止退出容器")])])]),t._v(" "),e("li",[e("code",[t._v("docker rm 容器id")]),t._v(" 删除容器\n"),e("ul",[e("li",[e("code",[t._v("docker rm [-f] $(docker ps -aq)")]),t._v(" 删除全部容器")])])]),t._v(" "),e("li",[e("code",[t._v("docker start 容器id")]),t._v(" 启动容器")]),t._v(" "),e("li",[e("code",[t._v("docker restart 容器id")]),t._v(" 重启容器")]),t._v(" "),e("li",[e("code",[t._v("docker stop 容器id")])]),t._v(" "),e("li",[e("code",[t._v("docker kill 容器id")]),t._v(" 强制停止")])]),t._v(" "),e("h4",{attrs:{id:"其他常用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他常用"}},[t._v("#")]),t._v(" 其他常用")]),t._v(" "),e("p",[e("code",[t._v("docker logs -tf --tail 条数 容器id")]),t._v(" 查看日志\n"),e("code",[t._v("docker top 容器id")]),t._v(" 查看进程\n"),e("code",[t._v("docker inspect 容器id")]),t._v(" 查看元数据\n"),e("code",[t._v("docker exec -it 容器id bashshell")]),t._v(" 进入容器后开启一个新的终端\n"),e("code",[t._v("docker attach 容器id")]),t._v(" 进入容器正在执行的终端，不会启动新的进程")]),t._v(" "),e("p",[e("code",[t._v("docker cp 容器id：容器内文件地址 其他容器（包括主机）文件夹")]),t._v(" 拷贝容器内的文件到主机上")]),t._v(" "),e("h4",{attrs:{id:"常用命令图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令图"}},[t._v("#")]),t._v(" 常用命令图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/kakigakki/picBed/master/imgs/20210308010718.png",alt:"20210308010718"}})]),t._v(" "),e("h3",{attrs:{id:"实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[t._v("#")]),t._v(" 实践")]),t._v(" "),e("h4",{attrs:{id:"安装-nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-nginx"}},[t._v("#")]),t._v(" 安装 Nginx")]),t._v(" "),e("p",[t._v("下载 Nginx\n"),e("code",[t._v("docker pull nginx")])]),t._v(" "),e("p",[t._v("跑起来\n"),e("code",[t._v("docker run -d -p 3344:80 --name nginx01 nginx")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("-d")]),t._v("表示后台运行")]),t._v(" "),e("li",[e("code",[t._v("-p 3344:80")]),t._v("表示用当前服务器的 3344 映射到 docker 中的 80")]),t._v(" "),e("li",[e("code",[t._v("-P")]),t._v(" 随机指定端口")]),t._v(" "),e("li",[e("code",[t._v("--name nginx01")]),t._v("表示给当前容器取名字")]),t._v(" "),e("li",[e("code",[t._v("nginx")]),t._v(" 则就是需要启动的镜像")])]),t._v(" "),e("h4",{attrs:{id:"安装-tomcat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-tomcat"}},[t._v("#")]),t._v(" 安装 Tomcat")]),t._v(" "),e("p",[t._v("下载 Nginx\n"),e("code",[t._v("docker pull tomcat:9.0")])]),t._v(" "),e("p",[t._v("跑起来\n"),e("code",[t._v("docker run -d -p 3355:8080 --name tomcat01 tomcat:9.0")])]),t._v(" "),e("h3",{attrs:{id:"可视化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可视化"}},[t._v("#")]),t._v(" 可视化")]),t._v(" "),e("h4",{attrs:{id:"portainer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#portainer"}},[t._v("#")]),t._v(" portainer")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("docker run \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("detach \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("publish "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("9000")]),t._v(" \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("publish "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v(" \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("name portainer \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("restart always \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("volume "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sock"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("run"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("docker"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sock \\\n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("volume portainer_data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("data \\\n portainer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("portainer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ce\n")])])]),e("h3",{attrs:{id:"镜像加载原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像加载原理"}},[t._v("#")]),t._v(" 镜像加载原理")]),t._v(" "),e("p",[t._v("docker 加载镜像使用分层下载的.如果不同镜像共用同类文件系统的话,就不会进行下载.每个文件都有自己的哈希值,类似于 git 中的提交对象.")]),t._v(" "),e("p",[t._v("镜像一般都是分层管理的.如果多个镜像有相同的层的话,就不用重复下载,而可以直接复用镜像层.\ndocker 下载的镜像都是只读的.无法进行修改.在镜像跑起来后对容器的修改都是放在"),e("code",[t._v("容器层")]),t._v("中,然后如果需要上层修改完的镜像,就是在原本的只读的镜像上加一层"),e("code",[t._v("容器层")]),t._v("然后进行打包发布.")]),t._v(" "),e("h3",{attrs:{id:"镜像提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像提交"}},[t._v("#")]),t._v(" 镜像提交")]),t._v(" "),e("p",[e("code",[t._v('docker commit -m="提交的信息 -a="作者" 需要提交的容器id 容器名字')]),t._v(" 提交容器成为一个新的副本")]),t._v(" "),e("h3",{attrs:{id:"容器数据卷"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器数据卷"}},[t._v("#")]),t._v(" 容器数据卷")]),t._v(" "),e("h4",{attrs:{id:"概要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概要"}},[t._v("#")]),t._v(" 概要")]),t._v(" "),e("p",[t._v("容器之间可以有一个数据共享的技术!docker 容器中产生的数据可以同步到本地.\n可以讲我们容器内的目录,挂载到 Linux 上面")]),t._v(" "),e("h4",{attrs:{id:"目的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[t._v("#")]),t._v(" 目的")]),t._v(" "),e("p",[t._v("容器的持久化与同步操作.\n容器间的数据共享")]),t._v(" "),e("h4",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("-v 主机目录:容器内目录 镜像")])]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("docker run "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("it "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("v 主机目录"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("容器内目录 镜像 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bin"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("bash\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-v为数据卷挂载,可以写多个-v,挂载多个")]),t._v("\n")])])]),e("p",[t._v("然后这两个目录就能够双向绑定了.两个目录就会自动同步\n如果容器与主机同步后,容器被删除后,主机上的内容也不会被删除")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("docker volume ls")]),t._v(" 查看所有数据卷的内容")])])]),t._v(" "),e("h4",{attrs:{id:"具名挂载和匿名挂载和指定路径挂载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具名挂载和匿名挂载和指定路径挂载"}},[t._v("#")]),t._v(" 具名挂载和匿名挂载和指定路径挂载")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("不指定卷名(不建议使用)\n"),e("code",[t._v("docker run -d -P -v /etc/nginx --name nginx01 nginx")])])]),t._v(" "),e("li",[e("p",[t._v("指定卷名(推荐)\n"),e("code",[t._v("docker run -d -P -v juming:/etc/nginx --name nginx01 nginx")])])]),t._v(" "),e("li",[e("p",[t._v("指定路径挂载(一般用来找目录)\n"),e("code",[t._v("docker run -d -P -v /home/nginx:/etc/nginx --name nginx01 nginx")])])]),t._v(" "),e("li",[e("p",[t._v("可以通过卷名找挂载目录\n"),e("code",[t._v("docker volumn inspect 卷名")])])])]),t._v(" "),e("h4",{attrs:{id:"读写权限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读写权限"}},[t._v("#")]),t._v(" 读写权限")]),t._v(" "),e("p",[t._v("可以在挂载路径时指定容器内的权限")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("ro 表示这个路径只能通过宿主机来操作,容器内部 readOnly\n"),e("code",[t._v("-v juming:/etc/nginx:ro")])])]),t._v(" "),e("li",[e("p",[t._v("rw 表示容器内可写可操作\n"),e("code",[t._v("-v juming:/etc/nginx:rw")])])])]),t._v(" "),e("h4",{attrs:{id:"容器间数据同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器间数据同步"}},[t._v("#")]),t._v(" 容器间数据同步")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("声明父容器,父容器的路径"),e("code",[t._v("/home/vol")]),t._v("挂载到宿主机上\n"),e("code",[t._v("docker run -it --name textParent -v parentV:/home/vol centos")])])]),t._v(" "),e("li",[e("p",[t._v("声明子容器,继承父容器.此时如果/home/vol 的内容被更新,父容器,子容器,宿主机上的挂载路径都会被更新\n"),e("code",[t._v("docker run -it --name textChild --volumns-from textParent centos")])])]),t._v(" "),e("li",[e("p",[t._v("数据卷容器的持续周期一直持续到没有容器使用为止.但是宿主机上的数据除非手动删除不然永不删除")])])]),t._v(" "),e("h3",{attrs:{id:"dockerfile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[t._v("#")]),t._v(" DockerFile")]),t._v(" "),e("h4",{attrs:{id:"基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),e("ol",[e("li",[t._v("每个保留关键字(命令)都必须是大写字母")]),t._v(" "),e("li",[t._v("命令是从上到下执行的")]),t._v(" "),e("li",[e("code",[t._v("#")]),t._v(" 表示注释")]),t._v(" "),e("li",[t._v("每个指令都会创建提交一个新的镜像层,并提交")]),t._v(" "),e("li",[t._v("dockerFile 是面向开发的,我们以后要发布项目,做镜像,就需要编写 dockerfile 文件,文件编写十分简单")])]),t._v(" "),e("h4",{attrs:{id:"dockerfile-命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-命令"}},[t._v("#")]),t._v(" dockerFile 命令")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/kakigakki/picBed/master/imgs/20210310225757.png",alt:"20210310225757"}})]),t._v(" "),e("ol",[e("li",[t._v("Docker hub 中百分之 99 的镜像都是"),e("code",[t._v("FROM sctrach")])])]),t._v(" "),e("h4",{attrs:{id:"通过-dockerfile-构建镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过-dockerfile-构建镜像"}},[t._v("#")]),t._v(" 通过 dockerFile 构建镜像")]),t._v(" "),e("p",[t._v("当构建完 dockerfile 后,就可以执行下面命令")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("docker build "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f dockerFile名字 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("t 生成的镜像名 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最后的 .  表示当前目录")]),t._v("\n")])])]),e("p",[t._v("查看他人的镜像是如何构建的")]),t._v(" "),e("div",{staticClass:"language-c extra-class"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[t._v("docker history 镜像名\n")])])]),e("h4",{attrs:{id:"cmd-命令和-entrypoint-命令的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmd-命令和-entrypoint-命令的区别"}},[t._v("#")]),t._v(" CMD 命令和 ENTRYPOINT 命令的区别")]),t._v(" "),e("p",[t._v("一个 dockerfile 中只能用一个 CMD 命令.如果有多个的话, 后面的命令会替换前面的命令.\n但是一个 dockerfile 中可以有多个 ENTRYPOINT,后面的 ENTRYPOINT 命令会追加到前面的上面\n比如:\n"),e("code",[t._v("ENTRYPOINT ls -a")]),t._v(" "),e("code",[t._v("ENTRYPOINT -l")]),t._v("\n就会构成"),e("code",[t._v("ENTRYPOINT la -a -l")])]),t._v(" "),e("h4",{attrs:{id:"安装-tomcat-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-tomcat-镜像"}},[t._v("#")]),t._v(" 安装 Tomcat 镜像")]),t._v(" "),e("ol",[e("li",[t._v("创建 Dockerfile 文件")])]),t._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" centos\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" kaki<578932490@qq.com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 声明作业路径")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" MYPATH /usr/local\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" $MYPATH\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" readme.txt $MYPATH/readme.txt\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" jdk1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("8u.tar.gz "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#ADD操作会自动解压")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ADD")]),t._v(" tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9.tar.gz\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基镜像上执行命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" yum "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("y install vim\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置java环境变量")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" JAVA_HOME  $MYPATH/jdk1.8.0\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" CLASSPATH $JAVA_HOME/lib/dt.jar"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$JAVA_HOME/lib/tools.jar\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置Tomcat环境变量")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" CATALINA_HOME  $MYPATH/tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9.0\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" CATALINA_BASH  $MYPATH/tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9.0\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置环境变量")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PATH $PATH"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$JAVA_HOME/bin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$CATALINA_HOME/lib"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$CATALINA_HOME/bin\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 暴露端口")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 8080\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" $MYPATH/tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9.0/bin/startup.sh && tail "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("F $MYPATH/tomcat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("9.0/bin/logs/catlina.out\n\n")])])]),e("ol",[e("li",[t._v("构建 dockerfile")])]),t._v(" "),e("div",{staticClass:"language-docker extra-class"},[e("pre",{pre:!0,attrs:{class:"language-docker"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为执行的dockerfile 名字为Dockerfile所以不需要指定源文件")]),t._v("\ndocker bulid "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("t myTomcat\n")])])]),e("h3",{attrs:{id:"发布镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布镜像"}},[t._v("#")]),t._v(" 发布镜像")]),t._v(" "),e("p",[t._v("利用"),e("code",[t._v("DockerHub")]),t._v("\n登陆自己的 dockerHub 的账号密码就能发布镜像了")]),t._v(" "),e("p",[e("code",[t._v("docker login -u xxxx -p xxxx")]),t._v("登陆账号密码\n"),e("code",[t._v("docher push 镜像名")]),t._v(" :如果提交镜像不成功,可以给镜像加"),e("code",[t._v("tag")]),t._v("后再发布")]),t._v(" "),e("h3",{attrs:{id:"docker-流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-流程"}},[t._v("#")]),t._v(" docker 流程")]),t._v(" "),e("p",[t._v("上面所有笔记的 docker 的流程可以总结为下张图\n"),e("img",{attrs:{src:"https://raw.githubusercontent.com/kakigakki/picBed/master/imgs/20210313153720.png",alt:"20210313153720"}})]),t._v(" "),e("h3",{attrs:{id:"docker-网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络"}},[t._v("#")]),t._v(" docker 网络")])])}),[],!1,null,null,null);a.default=s.exports}}]);