(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{486:function(v,e,_){"use strict";_.r(e);var t=_(8),i=Object(t.a)({},(function(){var v=this,e=v.$createElement,_=v._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"git-简介与配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-简介与配置"}},[v._v("#")]),v._v(" git 简介与配置")]),v._v(" "),_("ul",[_("li",[v._v("全局配置信息")])]),v._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" config --global user.name "),_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"Your Name"')]),v._v("\n "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" config --global user.email "),_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"email@example.com"')]),v._v("\n")])])]),_("ul",[_("li",[v._v("创建版本库")])]),v._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" init\n")])])]),_("ul",[_("li",[v._v("添加文件到仓库")])]),v._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),v._v(" readme.txt\n")])])]),_("ul",[_("li",[v._v("把文件提交到仓库")])]),v._v(" "),_("div",{staticClass:"language-bash extra-class"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token function"}},[v._v("git")]),v._v(" commit -m "),_("span",{pre:!0,attrs:{class:"token string"}},[v._v('"wrote a readme file"')]),v._v("\n")])])]),_("h2",{attrs:{id:"learngitbranch-学习"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#learngitbranch-学习"}},[v._v("#")]),v._v(" LearnGitBranch 学习")]),v._v(" "),_("h3",{attrs:{id:"本地操作篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#本地操作篇"}},[v._v("#")]),v._v(" 本地操作篇")]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("git checkout 哈希值/tag名")]),v._v(" 都可以让 HEAD 分离")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git checkout -b 分支名 哈希值/tag名")]),v._v(" 可以在指定位置创建新的分支并 checkout")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git branch -f [BRANCH_NAME] 提交对象")]),v._v(" 可以让 branch 自动在各个 commit 对象间移动")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git branch 分支名 HEAD^")]),v._v(" 和"),_("code",[v._v("git branch HEAD~层数")]),v._v(" 可以在指定提交对象上创建分支")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("HEAD^2")]),v._v("表示如果有两条路的情况下，走第二条")]),v._v(" "),_("li",[_("code",[v._v("HEAD^^~2^2")]),v._v("支持此类链式调用以便快速找到提交对象")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git reset HEAD^")]),v._v(" 不会新建分支，直接从当前分支回到上个分支。本地分支可用，远程分支不用了")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git revert HEAD^")]),v._v(" 创建一个与"),_("code",[v._v("希望回到的分支")]),v._v("一模一样的分支在当前分支下。远程分支也能使用")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git cherry-pick 哈希值 哈希值 哈希值")]),v._v(" 在知道提交对象哈希值的情况下 可以在当前分支下获取到任何分支的任何一个版本。十分牛逼啊。")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git rebase -i HEAD~层数")]),v._v(" 在不知道提交对象哈希值的情况下，可以用这个命令合并或删除一连串的提交对象，比如当你修一个 bug 提交了好几次但是只希望最后提交的"),_("code",[v._v("bugfix")]),v._v("分支跟"),_("code",[v._v("master")]),v._v("分支合并时就可以通过这个命令直接删除之前提交的哪些无用的分支并且直接找到"),_("code",[v._v("master")]),v._v("分支进行合并")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git rebase 分支1 分支2")]),v._v(" 在提交对象 1 下 生成合并了提交对象 2 的新分支,且 合并后 checkout 分支 2")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("与"),_("code",[v._v("git merge 分支2")]),v._v("的区别："),_("code",[v._v("merge")]),v._v("会保留原有的分支 2，然后变成合并树")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("rebase")]),v._v("用得好，可以把脏兮兮得树变成整齐得单支树")])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git commit --amend")]),v._v(" 新建 saro 一个新的平行分支")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git describe 哈希值/标签名/分支名")]),v._v(" 可以查看当前分支的"),_("code",[v._v("最近标签,离最近标签的距离，哈希值")])])])]),v._v(" "),_("h3",{attrs:{id:"远程操作篇"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#远程操作篇"}},[v._v("#")]),v._v(" 远程操作篇")]),v._v(" "),_("ol",[_("li",[_("p",[_("code",[v._v("git clone")]),v._v(" 当进行克隆的时候，会拉取远程仓库"),_("code",[v._v("origin/matser")]),v._v("。")]),v._v(" "),_("ul",[_("li",[v._v("如果我们尝试去"),_("code",[v._v("git checkout origin/master")]),v._v("的话，会导致 HEAD 分离，因为远程仓库无法检出且进行修改")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git fetch")]),v._v(" 拉取远程仓库的最新的远程分支，并且与本地上的远程分支合并。注意是"),_("strong",[v._v("本地的远程分支")]),v._v("与"),_("strong",[v._v("远程分支")]),v._v("的合并")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("git fetch origin main")]),v._v("到远程仓库“origin”中找到“main”分支，将本地仓库中的"),_("code",[v._v("o/main")]),v._v("中没有的提交记录都添加上去(本地仓库与远程仓库分支同名)")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git fetch origin bar:foo")]),v._v("到远程仓库“origin”中找到"),_("code",[v._v("bar")]),v._v("分支，将本地仓库中的"),_("code",[v._v("foo")]),v._v("中没有的提交记录都添加上去(本地仓库与远程仓库分支艺名)")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git fetch origin :foo")]),v._v(" 在本地仓库上新建一个 fetch 分支")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git fetch")]),v._v("如果没有任何参数,就是把远程仓库的所有分支都更新到本地上")])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git pull")]),v._v(" 相当于"),_("code",[v._v("git fetch")]),v._v("的基础上再加一个"),_("code",[v._v("git merge")])]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("git pull --rebase")]),v._v(" 相当于"),_("code",[v._v("git fetch")]),v._v("的基础上再加一个"),_("code",[v._v("git rebase o/master")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git pull origin foo")]),v._v(" 相当于"),_("code",[v._v("git fetch origin foo")]),v._v("+"),_("code",[v._v("git merge o/foo")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git pull origin bug^:bugFix")]),v._v("相当于"),_("code",[v._v("git fetch origin bug^:bugFix")]),v._v(" + "),_("code",[v._v("git merge bugFix")])])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git push")]),v._v(" 会让"),_("code",[v._v("远程仓库的分支")]),v._v("同步我们"),_("code",[v._v("本地的作业分支")]),v._v("，并且让"),_("code",[v._v("本地的远程分支")]),v._v("也同时获取到最新的"),_("code",[v._v("远程仓库的分支")]),v._v(",至此，远程仓库与本地仓库，完全同步！")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("git push origin main")]),v._v(" 表示 切到本地仓库中的“main”分支，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去(本地仓库与远程仓库分支同名)")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git push origin foo(提交对象/标签名):main")]),v._v(" 切到本地仓库中的"),_("code",[v._v("foo(提交对象/标签名)")]),v._v("对象上，获取所有的提交，再到远程仓库“origin”中找到“main”分支，将远程仓库中没有的提交记录都添加上去(本地仓库与远程仓库分支异名),如果远程仓库中不存在"),_("code",[v._v("main")]),v._v("的话就会在远程仓库上创建一个新分支")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git push origin :foo")]),v._v(" 会删除远程仓库的"),_("code",[v._v("foo")]),v._v("分支(慎用啊)")])])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("git checkout -b 分支名 o/main")]),v._v(" 通过远程分支创建一个新分支，让这个新分支跟踪远程分支。这就意味着这个新分支的"),_("code",[v._v("git pull")]),v._v("和"),_("code",[v._v("git push")]),v._v("都会与远程仓库的分支挂钩")]),v._v(" "),_("ul",[_("li",[v._v("还可以用"),_("code",[v._v("git branch -u o/main 分支名")]),v._v("来让一个本地分支跟踪远程分支.如果当前已经在此分支上,则可以用"),_("code",[v._v("git branch -u o/main")])])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);